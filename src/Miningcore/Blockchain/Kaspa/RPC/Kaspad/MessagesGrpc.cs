// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RPC/Kaspad/messages.proto
// </auto-generated>
// Original file comments:
// https://raw.githubusercontent.com/kaspanet/kaspad/master/infrastructure/network/netadapter/server/grpcserver/protowire/messages.proto
// RPC-related types. Request messages, response messages, and dependant types.
//
// Clients are expected to build RequestMessages and wrap them in KaspadMessage. (see messages.proto)
//
// Having received a RequestMessage, (wrapped in a KaspadMessage) the RPC server will respond with a
// ResponseMessage (likewise wrapped in a KaspadMessage) respective to the original RequestMessage.
//
// **IMPORTANT:** This API is a work in progress and is subject to break between versions.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

namespace Miningcore.Blockchain.Kaspa.Kaspad {

  using grpc = global::Grpc.Core;

  public partial class KaspadP2P
  {
    public KaspadP2P(string __ServiceName)
    {
      this.__Method_MessageStream = new grpc::Method<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "MessageStream",
        __Marshaller_protowire_KaspadMessage,
        __Marshaller_protowire_KaspadMessage);
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage> __Marshaller_protowire_KaspadMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage> __Method_MessageStream { get; private set; }

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Miningcore.Blockchain.Kaspa.Kaspad.MessagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for KaspadP2P</summary>
    public partial class KaspadP2PClient : grpc::ClientBase<KaspadP2PClient>
    {
      public KaspadP2P __KaspadP2P { get; private set; }

      /// <summary>Creates a new client for KaspadP2P</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public KaspadP2PClient(KaspadP2P __KaspadP2P, grpc::ChannelBase channel) : base(channel)
      {
        this.__KaspadP2P = __KaspadP2P;
      }
      /// <summary>Creates a new client for KaspadP2P that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public KaspadP2PClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected KaspadP2PClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected KaspadP2PClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage> MessageStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MessageStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage> MessageStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__KaspadP2P.__Method_MessageStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>KaspadP2P</c>, <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override KaspadP2PClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KaspadP2PClient(configuration);
      }
    }

  }
  public partial class KaspadRPC
  {
    public KaspadRPC(string __ServiceName)
    {
      this.__Method_MessageStream = new grpc::Method<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "MessageStream",
        __Marshaller_protowire_KaspadMessage,
        __Marshaller_protowire_KaspadMessage);
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage> __Marshaller_protowire_KaspadMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage> __Method_MessageStream { get; private set; }

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Miningcore.Blockchain.Kaspa.Kaspad.MessagesReflection.Descriptor.Services[1]; }
    }

    /// <summary>Client for KaspadRPC</summary>
    public partial class KaspadRPCClient : grpc::ClientBase<KaspadRPCClient>
    {
      public KaspadRPC __KaspadRPC { get; private set; }

      /// <summary>Creates a new client for KaspadRPC</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public KaspadRPCClient(KaspadRPC __KaspadRPC, grpc::ChannelBase channel) : base(channel)
      {
        this.__KaspadRPC = __KaspadRPC;
      }
      /// <summary>Creates a new client for KaspadRPC that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public KaspadRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected KaspadRPCClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected KaspadRPCClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage> MessageStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MessageStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage, global::Miningcore.Blockchain.Kaspa.Kaspad.KaspadMessage> MessageStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__KaspadRPC.__Method_MessageStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override KaspadRPCClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KaspadRPCClient(configuration);
      }
    }

  }
}
#endregion
