// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RPC/KaspaWalletd/kaspawalletd.proto
// </auto-generated>
// Original file comments:
// https://raw.githubusercontent.com/kaspanet/kaspad/master/cmd/kaspawallet/daemon/pb/kaspawalletd.proto
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

namespace Miningcore.Blockchain.Kaspa.KaspaWalletd {

  using grpc = global::Grpc.Core;

  public partial class KaspaWalletdRPC
  {
    public KaspaWalletdRPC(string __ServiceName)
    {
      this.__Method_GetBalance = new grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBalance",
        __Marshaller_KaspaWalletdRPC_GetBalanceRequest,
        __Marshaller_KaspaWalletdRPC_GetBalanceResponse);

      this.__Method_GetExternalSpendableUTXOs = new grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExternalSpendableUTXOs",
        __Marshaller_KaspaWalletdRPC_GetExternalSpendableUTXOsRequest,
        __Marshaller_KaspaWalletdRPC_GetExternalSpendableUTXOsResponse);

      this.__Method_CreateUnsignedTransactions = new grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateUnsignedTransactions",
        __Marshaller_KaspaWalletdRPC_CreateUnsignedTransactionsRequest,
        __Marshaller_KaspaWalletdRPC_CreateUnsignedTransactionsResponse);

      this.__Method_ShowAddresses = new grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ShowAddresses",
        __Marshaller_KaspaWalletdRPC_ShowAddressesRequest,
        __Marshaller_KaspaWalletdRPC_ShowAddressesResponse);

      this.__Method_NewAddress = new grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NewAddress",
        __Marshaller_KaspaWalletdRPC_NewAddressRequest,
        __Marshaller_KaspaWalletdRPC_NewAddressResponse);

      this.__Method_Shutdown = new grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Shutdown",
        __Marshaller_KaspaWalletdRPC_ShutdownRequest,
        __Marshaller_KaspaWalletdRPC_ShutdownResponse);

      this.__Method_Broadcast = new grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Broadcast",
        __Marshaller_KaspaWalletdRPC_BroadcastRequest,
        __Marshaller_KaspaWalletdRPC_BroadcastResponse);

      this.__Method_Send = new grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Send",
        __Marshaller_KaspaWalletdRPC_SendRequest,
        __Marshaller_KaspaWalletdRPC_SendResponse);

      this.__Method_Sign = new grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Sign",
        __Marshaller_KaspaWalletdRPC_SignRequest,
        __Marshaller_KaspaWalletdRPC_SignResponse);
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceRequest> __Marshaller_KaspaWalletdRPC_GetBalanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceResponse> __Marshaller_KaspaWalletdRPC_GetBalanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsRequest> __Marshaller_KaspaWalletdRPC_GetExternalSpendableUTXOsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsResponse> __Marshaller_KaspaWalletdRPC_GetExternalSpendableUTXOsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsRequest> __Marshaller_KaspaWalletdRPC_CreateUnsignedTransactionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsResponse> __Marshaller_KaspaWalletdRPC_CreateUnsignedTransactionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesRequest> __Marshaller_KaspaWalletdRPC_ShowAddressesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesResponse> __Marshaller_KaspaWalletdRPC_ShowAddressesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressRequest> __Marshaller_KaspaWalletdRPC_NewAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressResponse> __Marshaller_KaspaWalletdRPC_NewAddressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownRequest> __Marshaller_KaspaWalletdRPC_ShutdownRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownResponse> __Marshaller_KaspaWalletdRPC_ShutdownResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastRequest> __Marshaller_KaspaWalletdRPC_BroadcastRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastResponse> __Marshaller_KaspaWalletdRPC_BroadcastResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendRequest> __Marshaller_KaspaWalletdRPC_SendRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendResponse> __Marshaller_KaspaWalletdRPC_SendResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignRequest> __Marshaller_KaspaWalletdRPC_SignRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignResponse> __Marshaller_KaspaWalletdRPC_SignResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceResponse> __Method_GetBalance { get; private set; }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsResponse> __Method_GetExternalSpendableUTXOs { get; private set; }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsResponse> __Method_CreateUnsignedTransactions { get; private set; }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesResponse> __Method_ShowAddresses { get; private set; }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressResponse> __Method_NewAddress { get; private set; }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownResponse> __Method_Shutdown { get; private set; }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastResponse> __Method_Broadcast { get; private set; }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendResponse> __Method_Send { get; private set; }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public grpc::Method<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignRequest, global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignResponse> __Method_Sign { get; private set; }

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Miningcore.Blockchain.Kaspa.KaspaWalletd.KaspawalletdReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for KaspaWalletdRPC</summary>
    public partial class KaspaWalletdRPCClient : grpc::ClientBase<KaspaWalletdRPCClient>
    {
      public KaspaWalletdRPC __KaspaWalletdRPC { get; private set; }

      /// <summary>Creates a new client for KaspaWalletdRPC</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public KaspaWalletdRPCClient(KaspaWalletdRPC __KaspaWalletdRPC, grpc::ChannelBase channel) : base(channel)
      {
        this.__KaspaWalletdRPC = __KaspaWalletdRPC;
      }
      /// <summary>Creates a new client for KaspaWalletdRPC that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public KaspaWalletdRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected KaspaWalletdRPCClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected KaspaWalletdRPCClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceResponse GetBalance(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceResponse GetBalance(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__KaspaWalletdRPC.__Method_GetBalance, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceResponse> GetBalanceAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceResponse> GetBalanceAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__KaspaWalletdRPC.__Method_GetBalance, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsResponse GetExternalSpendableUTXOs(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExternalSpendableUTXOs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsResponse GetExternalSpendableUTXOs(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__KaspaWalletdRPC.__Method_GetExternalSpendableUTXOs, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsResponse> GetExternalSpendableUTXOsAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExternalSpendableUTXOsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsResponse> GetExternalSpendableUTXOsAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.GetExternalSpendableUTXOsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__KaspaWalletdRPC.__Method_GetExternalSpendableUTXOs, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsResponse CreateUnsignedTransactions(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUnsignedTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsResponse CreateUnsignedTransactions(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__KaspaWalletdRPC.__Method_CreateUnsignedTransactions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsResponse> CreateUnsignedTransactionsAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUnsignedTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsResponse> CreateUnsignedTransactionsAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.CreateUnsignedTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__KaspaWalletdRPC.__Method_CreateUnsignedTransactions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesResponse ShowAddresses(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShowAddresses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesResponse ShowAddresses(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__KaspaWalletdRPC.__Method_ShowAddresses, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesResponse> ShowAddressesAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShowAddressesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesResponse> ShowAddressesAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShowAddressesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__KaspaWalletdRPC.__Method_ShowAddresses, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressResponse NewAddress(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressResponse NewAddress(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__KaspaWalletdRPC.__Method_NewAddress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressResponse> NewAddressAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressResponse> NewAddressAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.NewAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__KaspaWalletdRPC.__Method_NewAddress, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownResponse Shutdown(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Shutdown(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownResponse Shutdown(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__KaspaWalletdRPC.__Method_Shutdown, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownResponse> ShutdownAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShutdownAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownResponse> ShutdownAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.ShutdownRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__KaspaWalletdRPC.__Method_Shutdown, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastResponse Broadcast(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Broadcast(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastResponse Broadcast(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__KaspaWalletdRPC.__Method_Broadcast, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastResponse> BroadcastAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastResponse> BroadcastAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.BroadcastRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__KaspaWalletdRPC.__Method_Broadcast, null, options, request);
      }
      /// <summary>
      /// Since SendRequest contains a password - this command should only be used on a trusted or secure connection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendResponse Send(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Send(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Since SendRequest contains a password - this command should only be used on a trusted or secure connection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendResponse Send(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__KaspaWalletdRPC.__Method_Send, null, options, request);
      }
      /// <summary>
      /// Since SendRequest contains a password - this command should only be used on a trusted or secure connection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendResponse> SendAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Since SendRequest contains a password - this command should only be used on a trusted or secure connection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendResponse> SendAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__KaspaWalletdRPC.__Method_Send, null, options, request);
      }
      /// <summary>
      /// Since SignRequest contains a password - this command should only be used on a trusted or secure connection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignResponse Sign(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Sign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Since SignRequest contains a password - this command should only be used on a trusted or secure connection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignResponse Sign(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__KaspaWalletdRPC.__Method_Sign, null, options, request);
      }
      /// <summary>
      /// Since SignRequest contains a password - this command should only be used on a trusted or secure connection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignResponse> SignAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Since SignRequest contains a password - this command should only be used on a trusted or secure connection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignResponse> SignAsync(global::Miningcore.Blockchain.Kaspa.KaspaWalletd.SignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__KaspaWalletdRPC.__Method_Sign, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override KaspaWalletdRPCClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KaspaWalletdRPCClient(configuration);
      }
    }

  }
}
#endregion
